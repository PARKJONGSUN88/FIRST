
===================================list-page.jsp===================================
<%@ page contentType="text/html; charset=utf-8"   %>
<%!
	int numPerPage = 10;  //페이지 그룹내에 페이지 개수
	int numPerBlock = 10;	  //페이지내에 글 개수
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<style>
table  {};
</style>
<title>list-page.jsp</title>
</head>
<body>
<h3> Email  등록 목록 </h3>
<table border=1 cellpadding=5 cellspacing=0>
<tr><td width=50>번호</td><td width=125>이름</td><td width=125>email</td></tr>

<!-- 이메일 목록 -->
</table>

<!-- 페이지 번호 -->
<div style="text-align:center">	
<%	
	Integer p = (Integer) request.getAttribute("pageNo");
	int mypage = p.intValue();
	//출력될 페이지가 속한 페이지 그룹 계산
    int currentBlock = (int)Math.ceil(mypage / (double)numPerBlock);
	
	//전체 페이지 개수
	Integer tp = (Integer) request.getAttribute("totalPage");
	double totalPage = tp.intValue();
	
	//전체 페이지 블록 개수
	int totalBlock = (int)Math.ceil(totalPage / numPerBlock);
	
	if(totalBlock > currentBlock) { 
		int togo = (currentBlock + 1) * numPerBlock;
		if(togo > totalPage)
			togo = (int) totalPage; %>
		<a href=./list.do?page=<%=togo%>> <<다음 </a>
<%	}
	//현재 페이지 그룹의 페이지 번호 리스트
	for(int i = numPerBlock; i > 0; i--) {
		int pn = numPerBlock * (currentBlock-1) + i;
		if(pn > totalPage)
			continue;
		if(pn == mypage) { %>
		<a href=./list.do?page=<%=pn%>>
		<span style="text-decoration:underline"><%=pn%></span></a>&nbsp;
<%		} else { %>
		<a href=./list.do?page=<%=pn%>><%=pn%></a>&nbsp		
<%		}
	}
	if(currentBlock > 1) { %>
		<a href=./list.do?page=<%= (currentBlock-1)*numPerBlock %>> 이전>> </a>
<%	} %> </div> 
</div>
</body>
</html>   


   
===============================참고==============================   
DECLARE
      vn_base_num NUMBER := 3;
    BEGIN
       FOR i IN 1..9
       LOOP
          DBMS_OUTPUT.PUT_LINE (vn_base_num || '*' || i || '= ' || vn_base_num * i);
       END LOOP;
    END;
/

# DBMS_RANDOM.VALUE
- 랜덤한 숫자를 생성한다.
- Syntax : DBMS_RANDOM.VALUE(low IN NUMBER, high IN NUMBER)
- 파라미터 low는: 최소 범위, high는: 최대 범위 값이다.

SELECT DBMS_RANDOM.VALUE(1000, 10000) rand FROM DUAL;

SELECT CEIL(DBMS_RANDOM.VALUE(1000, 10000)) rand 
FROM DUAL
CONNECT BY LEVEL <= 10;


# DBMS_RANDOM.STRING
- 랜덤한 문자열을 생성한다.
- Syntax : DBMS_RANDOM.STRING opt IN CHAR, len IN NUMBER)
- opt (옵션)은 아래와 같다.
'u', 'U' : 대문자
'l', 'L' : 소문자
'a', 'A' : 대소문자 구분없는 영문자
'x', 'X' : 영문자와 숫자 혼합
'p', 'P' : 문자 혼합


    SELECT DBMS_RANDOM.STRING('U',  10) rand FROM DUAL -- 대문자
    UNION ALL
    SELECT DBMS_RANDOM.STRING('L',  10) rand  FROM DUAL -- 소문자
    UNION ALL
    SELECT DBMS_RANDOM.STRING('A',  10) rand  FROM DUAL -- 영문자
    UNION ALL
    SELECT DBMS_RANDOM.STRING('X',  10) rand FROM DUAL -- 영숫자
    UNION ALL
    SELECT DBMS_RANDOM.STRING('P',  10) rand FROM DUAL  --문자혼합
)
SELECT * FROM t;


# DBMS_RANDOM.RANDOM
- DBMS_RANDOM.RANDOM은 랜덤 한 숫자를 생성해 준다.
- 한번 실행해 보자 SELECT DBMS_RANDOM.RANDOM FROM DUAL
- DBMS_RANDOM.RANDOM 함수를 이용하면 데이터를 랜덤한 순서로 정렬 할 수 있다.

SELECT * 
  FROM
     (SELECT * 
        FROM emp 
       ORDER BY DBMS_RANDOM.RANDOM()) 
 WHERE ROWNUM <= 3;

   
   
 DECLARE       
    BEGIN
       FOR i IN 1..35
       LOOP
           insert into emaillist values (DBMS_RANDOM.STRING('L',  10), concat(DBMS_RANDOM.STRING('L',  5), '@korea.com'), emaillist_seq.nextval);
       END LOOP;
       commit;
    END;  
    /
    
    
    
DECLARE       
    BEGIN
       FOR i IN 1..100
       LOOP
           insert into emaillist values (DBMS_RANDOM.STRING('L',  10), concat(DBMS_RANDOM.STRING('L',  5), '@korea.com'), emaillist_seq.nextval);
       END LOOP;
       commit;
    END;  
    /    
