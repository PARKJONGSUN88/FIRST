날짜 데이터처리하면 날짜 데이터 표현
java.util.Date d = new Date();
d = new Date(long millisecond)

java.util.Calendar cal = Calendar.getInstance();
현재 월 => cal.get(Calendar.MONTH)

5월 31일 설정 => cal.set(2019, 4, 31)
6월 1일로 만들려면 cal.add(Calendar.DATE, 1)

날짜 데이터를 특정 형식으로 문자열화하려면 :  yyyy-MM-dd hh:mm:ss
java.text.SimpleDateFormat
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
Date d = new Date();
sdf.format(d);

숫자 데이터를 특정 형식으로 문자열화하려면
java.text.DecimalFormat
double won = 12345.678
DecimalFormat df = new DecimalFormat("\u00A4##,###.");
String s = df.format(won);

특정 형식으로 문자열화된 데이터를 숫자로 변환하려면
df.parse(s)

jdk 8 java.time 패키지가 추가
LocalDate today = LocalDate.now()
get()으로 Month값 반환받을때 1~12값 반환
LocalTime = LocalTime.now()

Collection (데이터 집합, 자료 구조)
Framework(표준화된 설계)

배열 - 생성시에 배열의 크기를 반드시 설정해야 하고, 저장될 요소의 크기가 정적입니다. (동적 변경 불가)
Collection - 생성시에 저장될 요소의 크기를 설정하지 않아도 되고, 동적으로 요소가 저장될 크기는 변경됩니다



Collection - List, Set
List<Book> - 저장한 순서 보장, 중복된 객체 저장, 인덱스(offset)으로 저장된 요소를 처리 가능
       ArrayList(단일스레드환경), Vector(멀티스레드), LinkedList, Stack       
       add(객체), add(index, 객체)
       clear(), removeAll()
       remove(객체), remove(index)
       size()
       contains()
       get(index)
Iterator<Book>  - iterator()       
       while(iterator.hasNext()){
         Book b=   iterator.next();
       }
Enumeration - hasMoreElement(), nextElement()

Stack -LIFO구조,push(객체), pop(), peek() 
Queue인터페이스 (1.5) -  FIFO
Set - 중복 객체 저장 불가, 순서 보장 안됨
HashSet
TreeSet
add()
remove(), removeAll(), clear()
constains()
toArray()
size()
Iterator로 요소 접근  - iterator()       
       while(iterator.hasNext()){
         Book b=   iterator.next();
       }

Map - key객체와 value객체를 매핑해서 저장
put(key객체, value객체)
keySet()- Set타입
entrySet() - Map에 저장된 Key-Value 싸으로 Map.Entry타입 리턴

Map의 요소를 꺼내서 처리하려면
1. 키집합을 리턴받고 - keySet()
2. 키집합에 대한 Iterator 생성
3. Iterator로 키를 꺼내서 map에 저장된 Value객체를 꺼냅니다. get(Key)
values()


InputStream is = new InputStream(); X
InputStream is = new FileInputStream(); O
InputStream is = System.in; O

OutputStream os = new OutputStream(); X
OutputStream os = new FileOutputStream(); O
OutputStream os = System.out; //PrintStream

========================================================================


package lab.java.core;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Panel;

 

public class Count extends Panel implements Runnable {
    int num =0;
    public Count() {
    	setSize(200,200);
    }
    
    public void paint(Graphics g) {
    	g.setColor(Color.BLUE);
    	g.setFont(new Font("ArialBlack", Font.BOLD|Font.ITALIC, 75));
    	g.drawString(String.valueOf(num), 100, 100 );
    }
    
	@Override
	public void run() {
		while(true) {
			num++;
			repaint();
			try {
			Thread.sleep(1000);
			}catch(InterruptedException e) {
				
			}
		}
		
	}
   
}





package lab.java.core;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Panel;
 

public class Snow extends Panel implements Runnable {
    int x, y;
    public Snow() {
    	setSize(200,200);
    	setBackground(Color.BLACK);    	
    }
    
    public void paint(Graphics g) {
    	g.setColor(Color.WHITE);
    	g.fillOval(x, y, 5, 5);     	 
    }
    
    public void update(Graphics g) {
    	paint(g);
    }
    
	@Override
	public void run() {
		while(true) {
			x=(int)(Math.random()*200);
			y=(int)(Math.random()*200);
			repaint();
			try {
			Thread.sleep(300);
			}catch(InterruptedException e) {
				
			}
		}
		
	}
   
}




package lab.java.core;

import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class ThreadTest extends Frame{
	Count cnt ;
	Snow snow;
	ThreadTest(){
		setSize(600, 200);
		setLayout(new GridLayout(1,3));
		cnt = new Count();
		add(cnt); //panel 컴포넌트를 frame에 배치
		snow = new Snow();
		add(snow);
		setVisible(true);
		
		
		addWindowListener(new WindowAdapter() {		
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		
		Thread t = new Thread(cnt);
		t.start();  //스레드 시작 => 스케줄러 호출
		Thread t2 = new Thread(snow);
		t2.start();  //스레드 시작 => 스케줄러 호출
	}

	public static void main(String[] args) {
		new ThreadTest();

	}

}


















































